#ifndef PATTERNS_H
#define PATTERNS_H
#include <vector>
#include <windows.h>

std::vector<BYTE> pattern_compare = { 0x3C,0xE0,0x73,0x1B }; //CMP        AL, 0xe0
std::vector<BYTE> compareKey = { 0x5E,0x0F,0xB6,0xC3 };
std::vector<BYTE> pattern_NPCsNames = { 0x8b, 0x55, 0x08, 0x8a, 0x02, 0x32 };
std::vector<BYTE> pattern_misc1 = { 0x8A, 0x44, 0x24, 0x04, 0x0F, 0xBE, 0xC8 };
std::vector<BYTE> pattern_misc2 = { 0x8A, 0x00, 0x0F, 0xBE, 0xC8 };
std::vector<BYTE> pattern_misc3 = { 0x8A, 0x0C, 0x3E, 0x0F, 0xBE, 0xC1 };
std::vector<BYTE> pattern_misc4 = { 0xB8, 0x54, 0x01, 0x01, 0x00 };
std::vector<BYTE> pattern_misc6 = { 0x51, 0x8A, 0x00, 0x0F, 0xBE, 0xC8 };
std::vector<BYTE> DAT_PATTERN = { 0x81, 0xEC, 0x84, 0x02, 0x00, 0x00 };
std::vector<BYTE> DIR_PATTERN = { 0x81, 0xEC, 0x80, 0x02, 0x00, 0x00 };

//sprites HD
std::vector<BYTE> pattern1 = { 0x6a, 0x1a, 0x68, 0x00, 0x01 };
std::vector<BYTE> pattern2 = { 0x0f, 0xb7, 0x46, 0x36, 0x0f, 0xb7, 0x4e, 0x28, 0x0f, 0xb7, 0xd8, 0x0f, 0xb7, 0xf1, 0x03, 0xf3 };
std::vector<BYTE> pattern3 = { 0x81, 0xe1, 0xff, 0xff, 0x00, 0x00, 0xc1, 0xe8, 0x10, 0x56 };
std::vector<BYTE> pattern4 = { 0x0f, 0xb7, 0xf0, 0x8b, 0xce };
std::vector<BYTE> pattern5 = { 0x50, 0x83, 0xC5, 0x02, 0x55, 0x56, 0xE8 }; //1ère occurrence
std::vector<BYTE> pattern6 = { 0x50, 0x83, 0xC5, 0x02, 0x55, 0x56, 0xE8 };// 2nde occurrence, partir de la précédente!!!
std::vector<BYTE> pattern66 = { 0x50, 0x83, 0xC5, 0x02, 0x55, 0x51, 0xE8 }; //1ère occurrence
std::vector<BYTE> pattern77 = { 0x50, 0x83, 0xC5, 0x02, 0x55, 0x51, 0xE8 };
std::vector<BYTE> pattern8 = { 0x8D, 0xBE, 0x4B, 0xFF, 0xFF, 0xFF }; //<= SURFACES DE DESTINATION ! 
std::vector<BYTE> pattern9 = { 0x05, 0x00, 0x00, 0x00, 0x08, 0x89, 0x04, 0x8D };
std::vector<BYTE> pattern10 = { 0x55, 0x05, 0x00, 0x00, 0x00, 0x08, 0x56, 0x81, 0xc1 };
std::vector<BYTE> patternmultiple = { 0x05, 0x00, 0x00, 0x00, 0x08, 0x81, 0xC1 };
std::vector<BYTE> pattern11 = { 0x05, 0x00, 0x00, 0x00, 0x08, 0x5F, 0x81, 0xc1 };
std::vector<BYTE> pattern12 = { 0x81, 0xC2, 0x00, 0x00, 0x40, 0x00 };
std::vector<BYTE> pattern13 = { 0x8D, 0x8F, 0x00, 0x00, 0x40, 0x00 };
std::vector<BYTE> pattern14 = { 0x8D, 0x97, 0x00, 0x00, 0x40, 0x00 };
std::vector<BYTE> pattern15 = { 0x8b, 0x4c, 0x24, 0x18, 0x50, 0x89, 0x44, 0x24, 0x50, 0x89, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00 };
std::vector<BYTE> pattern16 = { 0xb8, 0x00, 0x03, 0x00, 0x00, 0xb9, 0x00, 0x04, 0x00, 0x00 };
std::vector<BYTE> pattern17 = { 0xB8, 0x00, 0x02, 0x00, 0x00, 0x8B, 0xC8, 0xE9 }; //only first occurrence! 
std::vector<BYTE> pattern20 = { 0xB8, 0x00, 0x02, 0x00, 0x00, 0x52, 0x50 };
std::vector<BYTE> pattern21 = { 0xbd, 0x80, 0xfb, 0x23, 0x00 };
std::vector<BYTE> pattern1_1 = { 0x8d, 0x48, 0xf0 };
std::vector<BYTE> pattern1_2 = { 0xc7, 0x44, 0x24, 0x20 };
std::vector<BYTE> pattern1_3 = { 0xb8, 0x00, 0x01 };
//DDS names
std::vector<BYTE> patternDDS = { 0x88, 0x4C, 0x04, 0x4C, 0x8D, 0x44};
#endif